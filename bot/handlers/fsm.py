"""FSM states and handlers."""
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import (
    add_rental, get_rental_by_id, get_tool_by_name, upsert_tool, 
    list_tools, get_tool_by_id, update_tool_name, update_tool_price, delete_tool,
    get_active_rentals, sum_revenue_by_date_for_user, add_revenue
)
from utils import parse_tool_and_price, moscow_today_str, format_daily_report_with_revenue
from .admin import check_admin_access, check_admin_callback
from .keyboards import (
    build_main_menu, build_rentals_list_kb, build_tool_menu_kb, 
    build_tools_list_kb, build_back_menu_kb
)


class RentalStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã."""
    waiting_deposit = State()
    waiting_payment_method = State()
    waiting_delivery_type = State()
    waiting_address = State()


class EditToolStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞."""
    choosing_tool = State()
    tool_menu = State()
    renaming = State()
    pricing = State()


class ReportStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤."""
    waiting_date = State()


async def create_rental_from_fsm(message_or_callback, state: FSMContext, scheduler) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∞—Ä–µ–Ω–¥—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö FSM."""
    data = await state.get_data()
    tool_name = data.get("tool_name")
    rent_price = data.get("rent_price")
    deposit = data.get("deposit", 0)
    payment_method = data.get("payment_method", "cash")
    delivery_type = data.get("delivery_type", "pickup")
    address = data.get("address", "")

    if not tool_name or not rent_price:
        await message_or_callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
    if hasattr(message_or_callback, 'from_user'):
        user_id = message_or_callback.from_user.id
    else:
        user_id = message_or_callback.message.from_user.id

    # –°–æ–∑–¥–∞–µ–º –∞—Ä–µ–Ω–¥—É
    rental_id = await add_rental(
        tool_name=tool_name,
        rent_price=rent_price,
        user_id=user_id,
        deposit=deposit,
        payment_method=payment_method,
        delivery_type=delivery_type,
        address=address
    )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É
    date_key = moscow_today_str()
    await add_revenue(date_key, rental_id, rent_price)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    rental_data = await get_rental_by_id(rental_id)
    await scheduler.schedule_expiration_notification(
        rental_id=rental_id,
        start_time_ts=rental_data["start_time"],
        user_id=user_id,
        tool_name=tool_name,
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
    delivery_text = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if delivery_type == "delivery" else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"

    result_text = (
        f"‚úÖ <b>–ê—Ä–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n"
        f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
        f"{payment_text}\n"
        f"{delivery_text}"
    )

    if delivery_type == "delivery" and address:
        result_text += f"\nüìç –ê–¥—Ä–µ—Å: {address}"

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(result_text)
        await message_or_callback.answer()
    else:
        await message_or_callback.answer(result_text)

    await state.clear()


def register_fsm_handlers(router: Router, scheduler) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    
    # --- FSM handlers for rental creation ---
    @router.message(RentalStates.waiting_deposit, F.text)
    async def state_waiting_deposit(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        text = (message.text or "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_buttons = {"üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥", "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ", "üìö –ö–∞—Ç–∞–ª–æ–≥", "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV", "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"}
        if text in main_buttons:
            await state.clear()
            # –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥":
                rows = await get_active_rentals(user_id=message.from_user.id)
                if not rows:
                    await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
                    return
                await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))
                return
            if text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å":
                date = moscow_today_str()
                rows = await get_active_rentals(user_id=message.from_user.id)
                s = await sum_revenue_by_date_for_user(date, message.from_user.id)
                await message.answer(format_daily_report_with_revenue(date, rows, s))
                return
            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                items = await list_tools(limit=50)
                if not items:
                    await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
                    return
                await state.set_state(EditToolStates.choosing_tool)
                await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))
                return
            if text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV":
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
                    "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
                    reply_markup=build_back_menu_kb(),
                )
                return
            if text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
                )
                return
            return
        
        try:
            deposit = int(text)
            if deposit < 0:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ (—á–∏—Å–ª–æ ‚â• 0)")
            return
        
        await state.update_data(deposit=deposit)
        await state.set_state(RentalStates.waiting_payment_method)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment:cash")],
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥", callback_data="payment:transfer")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
        ])
        await message.answer("üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

    @router.message(RentalStates.waiting_address, F.text)
    async def state_waiting_address(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        text = (message.text or "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_buttons = {"üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥", "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ", "üìö –ö–∞—Ç–∞–ª–æ–≥", "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV", "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"}
        if text in main_buttons:
            await state.clear()
            # –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥":
                rows = await get_active_rentals(user_id=message.from_user.id)
                if not rows:
                    await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
                    return
                await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))
                return
            if text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å":
                date = moscow_today_str()
                rows = await get_active_rentals(user_id=message.from_user.id)
                s = await sum_revenue_by_date_for_user(date, message.from_user.id)
                await message.answer(format_daily_report_with_revenue(date, rows, s))
                return
            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                items = await list_tools(limit=50)
                if not items:
                    await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
                    return
                await state.set_state(EditToolStates.choosing_tool)
                await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))
                return
            if text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV":
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
                    "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
                    reply_markup=build_back_menu_kb(),
                )
                return
            if text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
                )
                return
            return
        
        if not text:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
            return
        
        await state.update_data(address=text)
        await create_rental_from_fsm(message, state, scheduler)

    # --- FSM callback handlers ---
    @router.callback_query(F.data.startswith("deposit:"))
    async def cb_deposit(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        deposit = int(callback.data.split(":", 1)[1])
        await state.update_data(deposit=deposit)
        await state.set_state(RentalStates.waiting_payment_method)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment:cash")],
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥", callback_data="payment:transfer")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
        ])
        await callback.message.edit_text("üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        await callback.answer()

    @router.callback_query(F.data.startswith("payment:"))
    async def cb_payment_method(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        payment_method = callback.data.split(":", 1)[1]
        await state.update_data(payment_method=payment_method)
        await state.set_state(RentalStates.waiting_delivery_type)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery:delivery")],
            [InlineKeyboardButton(text="üè† –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery:pickup")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment")]
        ])
        await callback.message.edit_text("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=kb)
        await callback.answer()

    @router.callback_query(F.data.startswith("delivery:"))
    async def cb_delivery_type(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        delivery_type = callback.data.split(":", 1)[1]
        await state.update_data(delivery_type=delivery_type)
        
        if delivery_type == "delivery":
            await state.set_state(RentalStates.waiting_address)
            await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            await callback.answer()
        else:
            # –°–∞–º–æ–≤—ã–≤–æ–∑ - –∞–¥—Ä–µ—Å –Ω–µ –Ω—É–∂–µ–Ω
            await state.update_data(address="–°–∞–º–æ–≤—ã–≤–æ–∑")
            await create_rental_from_fsm(callback, state, scheduler)

    # --- Tool editing FSM handlers ---
    @router.message(EditToolStates.renaming, F.text)
    async def state_renaming(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        data = await state.get_data()
        tool_id = int(data.get("tool_id"))
        new_name = (message.text or "").strip()
        if not new_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        await update_tool_name(tool_id, new_name)
        tool = await get_tool_by_id(tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\nüîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))

    @router.message(EditToolStates.pricing, F.text)
    async def state_pricing(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        data = await state.get_data()
        tool_id = int(data.get("tool_id"))
        try:
            new_price = int((message.text or "").strip())
            if new_price <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await update_tool_price(tool_id, new_price)
        tool = await get_tool_by_id(tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\nüîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))

    # --- Report FSM handlers ---
    @router.message(ReportStates.waiting_date, F.text)
    async def state_report_by_date(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        text = (message.text or "").strip()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º
        main_buttons = {"üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥", "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ", "üìö –ö–∞—Ç–∞–ª–æ–≥", "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV", "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"}
        if text in main_buttons:
            await state.clear()
            # –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥":
                rows = await get_active_rentals(user_id=message.from_user.id)
                if not rows:
                    await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
                    return
                await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))
                return
            if text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å":
                date = moscow_today_str()
                rows = await get_active_rentals(user_id=message.from_user.id)
                s = await sum_revenue_by_date_for_user(date, message.from_user.id)
                await message.answer(format_daily_report_with_revenue(date, rows, s))
                return
            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                items = await list_tools(limit=50)
                if not items:
                    await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
                    return
                await state.set_state(EditToolStates.choosing_tool)
                await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))
                return
            if text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV":
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
                    "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
                    reply_markup=build_back_menu_kb(),
                )
                return
            if text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
                )
                return
            return
        if text.startswith("/"):
            await state.clear()
            # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É
            await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
            return
        if len(text) != 10 or text[4] != '-' or text[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD")
            return
        date = text
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(format_daily_report_with_revenue(date, rows, s), reply_markup=build_back_menu_kb())
        await state.clear()