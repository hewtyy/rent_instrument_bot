"""Callback query handlers."""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from database import (
    get_active_rentals, renew_rental, close_rental, get_rental_by_id, 
    add_revenue, get_tool_by_id, update_tool_name, update_tool_price, 
    delete_tool, reset_database
)
from utils import format_remaining_time, format_local_end_time_hhmm, moscow_today_str
from .admin import check_admin_callback
from .keyboards import (
    build_main_menu, build_rentals_list_kb, build_rental_menu_kb,
    build_tools_list_kb, build_tool_menu_kb, build_back_menu_kb
)
from .fsm import EditToolStates


def register_callback_handlers(router: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤."""
    
    @router.callback_query(F.data == "back_menu")
    async def cb_back_menu(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        await state.clear()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=build_main_menu())
        await callback.answer()

    @router.callback_query(F.data == "rentals_refresh")
    async def cb_rentals_refresh(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        rows = await get_active_rentals(user_id=callback.from_user.id)
        if not rows:
            await callback.message.edit_text("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.", reply_markup=None)
            await callback.answer()
            return
        # –ú–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –∏ —Ç–µ–∫—Å—Ç, –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):")
        await callback.message.edit_reply_markup(reply_markup=build_rentals_list_kb(rows))
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    @router.callback_query(F.data == "rentals_list")
    async def cb_rentals_list(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        rows = await get_active_rentals(user_id=callback.from_user.id)
        if not rows:
            await callback.message.edit_text("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            await callback.answer()
            return
        await callback.message.edit_text(
            "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):",
            reply_markup=build_rentals_list_kb(rows),
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("rental_open:"))
    async def cb_rental_open(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if not row or int(row.get("active", 0)) != 1:
            await callback.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
            return
        left = format_remaining_time(int(row["start_time"]))
        end_hhmm = format_local_end_time_hhmm(int(row["start_time"]))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        deposit = int(row.get("deposit", 0))
        payment_method = row.get("payment_method", "cash")
        delivery_type = row.get("delivery_type", "pickup")
        address = row.get("address", "")
        
        payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
        delivery_text = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if delivery_type == "delivery" else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"
        
        text = (
            f"üîß <b>{row['tool_name']}</b> ‚Äî {row['rent_price']}‚ÇΩ/—Å—É—Ç–∫–∏\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {left} (–¥–æ {end_hhmm})\n"
            f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
            f"{payment_text}\n"
            f"{delivery_text}"
        )
        
        if delivery_type == "delivery" and address:
            text += f"\nüìç –ê–¥—Ä–µ—Å: {address}"
        
        await callback.message.edit_text(text, reply_markup=build_rental_menu_kb(rental_id))
        await callback.answer()

    @router.callback_query(F.data.startswith("rental_renew:"))
    async def cb_rental_renew(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        try:
            rental_id = int(callback.data.split(":", 1)[1])
            row_before = await get_rental_by_id(rental_id)
            if not row_before:
                await callback.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            # –ù–∞—á–∏—Å–ª–∏–º –≤—ã—Ä—É—á–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏ –ø—Ä–æ–¥–ª–∏–º –Ω–∞ +24—á –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row_before["rent_price"]))
            await renew_rental(rental_id)
            row_after = await get_rental_by_id(rental_id)
            if row_after:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
                left = format_remaining_time(int(row_after["start_time"]))
                end_hhmm = format_local_end_time_hhmm(int(row_after["start_time"]))
                
                deposit = int(row_after.get("deposit", 0))
                payment_method = row_after.get("payment_method", "cash")
                delivery_type = row_after.get("delivery_type", "pickup")
                address = row_after.get("address", "")
                
                payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
                delivery_text = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if delivery_type == "delivery" else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"
                
                updated_text = (
                    f"üîß <b>{row_after['tool_name']}</b> ‚Äî {row_after['rent_price']}‚ÇΩ/—Å—É—Ç–∫–∏\n"
                    f"‚úÖ –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞\n"
                    f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {left} (–¥–æ {end_hhmm})\n"
                    f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
                    f"{payment_text}\n"
                    f"{delivery_text}"
                )
                if delivery_type == "delivery" and address:
                    updated_text += f"\nüìç –ê–¥—Ä–µ—Å: {address}"
                
                try:
                    await callback.message.edit_text(updated_text, reply_markup=build_rental_menu_kb(rental_id))
                except TelegramBadRequest:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    pass
            await callback.answer("–ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞")
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.exception("Failed to renew rental %s", rental_id)
            try:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è", show_alert=True)
            except Exception:
                pass

    @router.callback_query(F.data.startswith("rental_close:"))
    async def cb_rental_close(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if row:
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row["rent_price"]))
        await close_rental(rental_id)
        await callback.message.edit_text("üîí –ê—Ä–µ–Ω–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await callback.answer()

    # --- Tool editing callbacks ---
    @router.callback_query(F.data == "tools_list")
    async def cb_tools_list(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        items = await list_tools(limit=50)
        await state.set_state(EditToolStates.choosing_tool)
        await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await callback.message.answer(reply_markup=build_tools_list_kb(items), text=" ")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_open:"))
    async def cb_tool_open(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        tool = await get_tool_by_id(tool_id)
        if not tool:
            await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await callback.message.edit_text(f"üîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_rename:"))
    async def cb_tool_do_rename(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.renaming)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_price:"))
    async def cb_tool_do_price(callback: CallbackQuery, state: FSMContext) -> None:
        if not check_admin_callback(callback):
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.pricing)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_delete:"))
    async def cb_tool_do_delete(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        await delete_tool(tool_id)
        await callback.message.edit_text("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω")
        await callback.answer()

    # --- Reset database callback ---
    @router.callback_query(F.data == "reset_db_confirm")
    async def cb_reset_db(confirm: CallbackQuery) -> None:
        if not check_admin_callback(confirm):
            return
        
        await reset_database()
        await confirm.message.edit_text("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await confirm.answer()

    # --- Legacy expiration callbacks ---
    @router.callback_query(F.data.startswith("renew:"))
    async def on_renew(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        try:
            rental_id = int(callback.data.split(":", 1)[1])
            row_before = await get_rental_by_id(rental_id)
            if row_before:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤—ã—Ä—É—á–∫–∏ (–æ–Ω–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
                await renew_rental(rental_id)
                row_after = await get_rental_by_id(rental_id)
                if row_after:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
                    left = format_remaining_time(int(row_after["start_time"]))
                    end_hhmm = format_local_end_time_hhmm(int(row_after["start_time"]))
                    
                    deposit = int(row_after.get("deposit", 0))
                    payment_method = row_after.get("payment_method", "cash")
                    delivery_type = row_after.get("delivery_type", "pickup")
                    address = row_after.get("address", "")
                    
                    payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
                    delivery_text = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if delivery_type == "delivery" else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"
                    
                    updated_text = (
                        f"üîß <b>{row_after['tool_name']}</b> ‚Äî {row_after['rent_price']}‚ÇΩ/—Å—É—Ç–∫–∏\n"
                        f"‚úÖ –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞\n"
                        f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {left} (–¥–æ {end_hhmm})\n"
                        f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
                        f"{payment_text}\n"
                        f"{delivery_text}"
                    )
                    if delivery_type == "delivery" and address:
                        updated_text += f"\nüìç –ê–¥—Ä–µ—Å: {address}"
                    
                    try:
                        await callback.message.edit_text(updated_text, reply_markup=build_rental_menu_kb(rental_id))
                    except TelegramBadRequest:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        pass
                await callback.answer("–ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞")
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.exception("Failed to renew rental %s", rental_id)
            try:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è", show_alert=True)
            except Exception:
                pass

    @router.callback_query(F.data.startswith("close:"))
    async def on_close(callback: CallbackQuery) -> None:
        if not check_admin_callback(callback):
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if row:
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row["rent_price"]))
        await close_rental(rental_id)
        await callback.message.edit_text("üîí –ê—Ä–µ–Ω–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await callback.answer()