"""Command handlers."""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from database import (
    get_active_rentals, sum_revenue_by_date_for_user, get_tool_by_name, 
    upsert_tool, list_tools, import_catalog_from_csv, reset_database,
    get_tool_by_id, update_tool_name, update_tool_price, delete_tool
)
from utils import parse_tool_and_price, moscow_today_str, format_daily_report_with_revenue
from .admin import check_admin_access, check_admin_callback
from .keyboards import (
    build_main_menu, build_rentals_list_kb, build_tools_list_kb, 
    build_tool_menu_kb, build_back_menu_kb, build_reset_confirm_kb
)
from .fsm import EditToolStates, ReportStates, RentalStates


def register_command_handlers(router: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
    
    @router.message(Command("start"))
    async def cmd_start(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.clear()
        main_kb = build_main_menu()
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\n"
            "<b>–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500</b>\n\n"
            "–ì–¥–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞ ‚Äî —Ü–µ–Ω–∞ –≤ ‚ÇΩ –∑–∞ —Å—É—Ç–∫–∏.",
            reply_markup=main_kb,
        )

    @router.message(Command("list"))
    async def cmd_list(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.clear()
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            return
        await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))

    @router.message(Command("report_now"))
    async def cmd_report_now(message: Message, scheduler) -> None:
        if not await check_admin_access(message):
            return
        
        await scheduler.send_daily_report_for_user(message.from_user.id)
        await message.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    @router.message(Command("report_today"))
    async def cmd_report_today(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        date = moscow_today_str()
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(Command("report"))
    async def cmd_report(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        # /report YYYY-MM-DD
        text = (message.text or "").strip()
        parts = text.split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /report YYYY-MM-DD")
            return
        date = parts[1]
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: /report YYYY-MM-DD")
            return
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(Command("expire_last"))
    async def cmd_expire_last(message: Message, scheduler) -> None:
        if not await check_admin_access(message):
            return
        
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç")
            return
        rental_id = int(rows[0]["id"])  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ ORDER BY id DESC –≤ –ë–î
        await scheduler.trigger_expiration_now(rental_id)
        await message.answer("‚è±Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    @router.message(Command("income_today"))
    async def cmd_income_today(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        date = moscow_today_str()
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ {date}: {s}‚ÇΩ")

    @router.message(Command("income"))
    async def cmd_income(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /income YYYY-MM-DD
        text = (message.text or "").strip()
        parts = text.split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /income YYYY-MM-DD")
            return
        date = parts[1]
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: /income YYYY-MM-DD")
            return
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ {date}: {s}‚ÇΩ")

    # --- Catalog commands ---
    @router.message(Command("catalog"))
    async def cmd_catalog(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        items = await list_tools(limit=50)
        if not items:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
            return
        await state.set_state(EditToolStates.choosing_tool)
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))

    @router.message(Command("setprice"))
    async def cmd_setprice(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        # /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>
        text = (message.text or "").strip()
        parts = text.split(" ", 2)
        if len(parts) < 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")
            return
        _, name, price_str = parts
        try:
            price = int(price_str)
            if price <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await upsert_tool(name, price)
        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è \"{name}\": {price}‚ÇΩ")

    @router.message(Command("import_catalog"))
    async def cmd_import_catalog(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª /app/data/catalog.csv
        from pathlib import Path
        path = Path("/app/data/catalog.csv")
        if not path.exists():
            await message.answer("–§–∞–π–ª /app/data/catalog.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ volume bot_data.")
            return
        count = await import_catalog_from_csv(str(path))
        await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {count}")

    # --- Reset database (testing) ---
    @router.message(Command("reset_db"))
    async def cmd_reset_db(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        await message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∞—Ä–µ–Ω–¥—ã, –≤—ã—Ä—É—á–∫–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥.",
            reply_markup=build_reset_confirm_kb(),
        )

    # --- Text buttons handling ---
    @router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥")
    async def btn_list(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.clear()
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            return
        await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))

    @router.message(F.text == "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ")
    async def btn_report_by_date(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.set_state(ReportStates.waiting_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD", reply_markup=build_back_menu_kb())

    @router.message(F.text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å")
    async def btn_report_now(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.clear()
        # –¢–æ –∂–µ, —á—Ç–æ /report_today
        date = moscow_today_str()
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
    async def btn_catalog(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        # –°–±—Ä–æ—Å–∏–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–∞—Ç–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –∫–∞–∫ –¥–∞—Ç–∞
        await state.clear()
        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π FSM, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /catalog
        items = await list_tools(limit=50)
        if not items:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
            return
        await state.set_state(EditToolStates.choosing_tool)
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))

    @router.message(F.text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV")
    async def btn_import_hint(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.clear()
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
            reply_markup=build_back_menu_kb(),
        )

    @router.message(F.text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
    async def btn_setprice_hint(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        await state.clear()
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n"
            "–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
        )

    # --- CSV import by sending a file ---
    @router.message(F.document)
    async def on_document(message: Message) -> None:
        if not await check_admin_access(message):
            return
        
        doc = message.document
        if not doc:
            return
        file_name = (doc.file_name or "").lower()
        mime = (doc.mime_type or "").lower()
        if not (file_name.endswith('.csv') or 'csv' in mime):
            # Ignore non-CSV documents
            return
        await message.answer("‚¨áÔ∏è –ü–æ–ª—É—á–∏–ª CSV, –Ω–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç...")
        try:
            from pathlib import Path

            uploads_dir = Path("/app/data/uploads")
            uploads_dir.mkdir(parents=True, exist_ok=True)
            dest_path = uploads_dir / (file_name or "catalog.csv")

            # Download file to destination
            await message.bot.download(doc, destination=str(dest_path))

            count = await import_catalog_from_csv(str(dest_path))
            await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {count}")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ,—Ü–µ–Ω–∞")

    # --- Main text handler for rental creation ---
    @router.message(F.text)
    async def add_rent_handler(message: Message, state: FSMContext) -> None:
        if not await check_admin_access(message):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        current_state = await state.get_state()
        if current_state in [RentalStates.waiting_deposit, RentalStates.waiting_payment_method, 
                           RentalStates.waiting_delivery_type, RentalStates.waiting_address]:
            # –ï—Å–ª–∏ –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
            return
        
        text = (message.text or "").strip()
        # –ö–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if text.startswith("rename "):
            parts = text.split(" ", 2)
            if len(parts) < 3:
                await message.answer("–§–æ—Ä–º–∞—Ç: rename <id> <–ù–æ–≤–æ–µ–ù–∞–∑–≤–∞–Ω–∏–µ>")
                return
            try:
                tool_id = int(parts[1])
            except ValueError:
                await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            new_name = parts[2].strip()
            if not new_name:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            await update_tool_name(tool_id, new_name)
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return

        if text.startswith("price "):
            parts = text.split()
            if len(parts) != 3:
                await message.answer("–§–æ—Ä–º–∞—Ç: price <id> <—Ü–µ–Ω–∞>")
                return
            try:
                tool_id = int(parts[1])
                new_price = int(parts[2])
                if new_price <= 0:
                    raise ValueError
            except ValueError:
                await message.answer("ID –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
                return
            await update_tool_price(tool_id, new_price)
            await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        parsed = parse_tool_and_price(text)
        if parsed is None:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ü–µ–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_row = await get_tool_by_name(text)
            if not catalog_row:
                await message.answer(
                    "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¶–µ–Ω–∞</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500</b>\n"
                    "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ /setprice –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥."
                )
                return
            tool_name, rent_price = catalog_row["name"], int(catalog_row["price"])
        else:
            tool_name, rent_price = parsed

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ FSM
        await state.update_data(tool_name=tool_name, rent_price=rent_price)
        await state.set_state(RentalStates.waiting_deposit)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ª–æ–≥
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–∑ –∑–∞–ª–æ–≥–∞", callback_data="deposit:0")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_menu")]
        ])
        await message.answer(
            f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n\n"
            "üí∞ –ö–∞–∫–æ–π –∑–∞–ª–æ–≥ –æ—Å—Ç–∞–≤–∏–ª–∏? (–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É)",
            reply_markup=kb
        )