import logging
import os
from typing import Tuple

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database import add_rental, get_active_rentals, renew_rental, close_rental, get_rental_by_id, add_revenue, sum_revenue_by_date_for_user, get_tool_by_name, upsert_tool, list_tools, import_catalog_from_csv, reset_database, get_tool_by_id, update_tool_name, update_tool_price, delete_tool, sum_revenue_by_date, reset_rental_start_now
from utils import parse_tool_and_price, format_active_list, ts_to_moscow_date_str, moscow_today_str, moscow_yesterday_str, format_remaining_time, format_local_end_time_hhmm

logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    admin_ids = os.getenv("ADMIN_IDS", "").split(",")
    admin_ids = [int(uid.strip()) for uid in admin_ids if uid.strip()]
    return user_id in admin_ids


def check_admin_access(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"""
    if not is_admin(message.from_user.id):
        admin_ids = os.getenv("ADMIN_IDS", "").split(",")
        admin_ids = [uid.strip() for uid in admin_ids if uid.strip()]
        admin_list = ", ".join(admin_ids) if admin_ids else "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        message.answer(
            "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"
            f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_list}\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="HTML"
        )
        return False
    return True


def build_expiration_keyboard(rental_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"renew:{rental_id}"),
            InlineKeyboardButton(text="‚ùå –ó–∞–±—Ä–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data=f"close:{rental_id}"),
        ]
    ])
    return kb


class EditToolStates(StatesGroup):
    choosing_tool = State()
    tool_menu = State()
    renaming = State()
    pricing = State()


class ReportStates(StatesGroup):
    waiting_date = State()


class RentalStates(StatesGroup):
    waiting_deposit = State()
    waiting_payment_method = State()
    waiting_delivery_type = State()
    waiting_address = State()


def register_handlers(dp, scheduler) -> None:
    router = Router()
    fsm_router = Router()  # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    def build_main_menu() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å")],
                [KeyboardButton(text="üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ"), KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥")],
                [KeyboardButton(text="‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV"), KeyboardButton(text="üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")],
            ],
            resize_keyboard=True,
        )

    # --- FSM handlers for rental creation ---
    @fsm_router.message(RentalStates.waiting_deposit, F.text)
    async def state_waiting_deposit(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        text = (message.text or "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_buttons = {"üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥", "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ", "üìö –ö–∞—Ç–∞–ª–æ–≥", "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV", "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"}
        if text in main_buttons:
            await state.clear()
            # –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥":
                rows = await get_active_rentals(user_id=message.from_user.id)
                if not rows:
                    await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
                    return
                await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))
                return
            if text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å":
                from utils import format_daily_report_with_revenue
                date = moscow_today_str()
                rows = await get_active_rentals(user_id=message.from_user.id)
                s = await sum_revenue_by_date_for_user(date, message.from_user.id)
                await message.answer(format_daily_report_with_revenue(date, rows, s))
                return
            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                await cmd_catalog(message, state)
                return
            if text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV":
                back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]])
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
                    "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
                    reply_markup=back_kb,
                )
                return
            if text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
                )
                return
            return
        
        try:
            deposit = int(text)
            if deposit < 0:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ (—á–∏—Å–ª–æ ‚â• 0)")
            return
        
        await state.update_data(deposit=deposit)
        await state.set_state(RentalStates.waiting_payment_method)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment:cash")],
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥", callback_data="payment:transfer")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
        ])
        await message.answer("üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

    @fsm_router.message(RentalStates.waiting_address, F.text)
    async def state_waiting_address(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        text = (message.text or "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_buttons = {"üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥", "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ", "üìö –ö–∞—Ç–∞–ª–æ–≥", "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV", "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"}
        if text in main_buttons:
            await state.clear()
            # –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥":
                rows = await get_active_rentals(user_id=message.from_user.id)
                if not rows:
                    await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
                    return
                await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))
                return
            if text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å":
                from utils import format_daily_report_with_revenue
                date = moscow_today_str()
                rows = await get_active_rentals(user_id=message.from_user.id)
                s = await sum_revenue_by_date_for_user(date, message.from_user.id)
                await message.answer(format_daily_report_with_revenue(date, rows, s))
                return
            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                await cmd_catalog(message, state)
                return
            if text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV":
                back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]])
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
                    "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
                    reply_markup=back_kb,
                )
                return
            if text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
                )
                return
            return
        
        if not text:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
            return
        
        await state.update_data(address=text)
        await create_rental_from_fsm(message, state)

    # --- FSM callback handlers ---
    @fsm_router.callback_query(F.data.startswith("deposit:"))
    async def cb_deposit(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        deposit = int(callback.data.split(":", 1)[1])
        await state.update_data(deposit=deposit)
        await state.set_state(RentalStates.waiting_payment_method)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment:cash")],
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥", callback_data="payment:transfer")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
        ])
        await callback.message.edit_text("üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        await callback.answer()

    @fsm_router.callback_query(F.data == "back_to_deposit")
    async def cb_back_to_deposit(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        data = await state.get_data()
        tool_name = data.get("tool_name")
        rent_price = data.get("rent_price")
        
        await state.set_state(RentalStates.waiting_deposit)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–∑ –∑–∞–ª–æ–≥–∞", callback_data="deposit:0")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_menu")]
        ])
        await callback.message.edit_text(
            f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n\n"
            "üí∞ –ö–∞–∫–æ–π –∑–∞–ª–æ–≥ –æ—Å—Ç–∞–≤–∏–ª–∏? (–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É)",
            reply_markup=kb
        )
        await callback.answer()

    @fsm_router.callback_query(F.data == "back_to_payment")
    async def cb_back_to_payment(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        data = await state.get_data()
        tool_name = data.get("tool_name")
        rent_price = data.get("rent_price")
        deposit = data.get("deposit", 0)
        
        await state.set_state(RentalStates.waiting_payment_method)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment:cash")],
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥", callback_data="payment:transfer")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
        ])
        await callback.message.edit_text(
            f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n"
            f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n\n"
            "üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb
        )
        await callback.answer()

    @fsm_router.callback_query(F.data == "back_to_delivery")
    async def cb_back_to_delivery(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        data = await state.get_data()
        tool_name = data.get("tool_name")
        rent_price = data.get("rent_price")
        deposit = data.get("deposit", 0)
        payment_method = data.get("payment_method", "cash")
        
        payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
        
        await state.set_state(RentalStates.waiting_delivery_type)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery:delivery")],
            [InlineKeyboardButton(text="üè† –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery:pickup")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment")]
        ])
        await callback.message.edit_text(
            f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n"
            f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
            f"{payment_text}\n\n"
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?",
            reply_markup=kb
        )
        await callback.answer()

    @fsm_router.callback_query(F.data.startswith("payment:"))
    async def cb_payment_method(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        payment_method = callback.data.split(":", 1)[1]
        await state.update_data(payment_method=payment_method)
        await state.set_state(RentalStates.waiting_delivery_type)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery:delivery")],
            [InlineKeyboardButton(text="üè† –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery:pickup")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment")]
        ])
        await callback.message.edit_text("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=kb)
        await callback.answer()

    @fsm_router.callback_query(F.data.startswith("delivery:"))
    async def cb_delivery_type(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        delivery_type = callback.data.split(":", 1)[1]
        await state.update_data(delivery_type=delivery_type)
        
        if delivery_type == "delivery":
            await state.set_state(RentalStates.waiting_address)
            await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            await callback.answer()
        else:
            # –°–∞–º–æ–≤—ã–≤–æ–∑ - –∞–¥—Ä–µ—Å –Ω–µ –Ω—É–∂–µ–Ω
            await state.update_data(address="–°–∞–º–æ–≤—ã–≤–æ–∑")
            await create_rental_from_fsm(callback, state)

    @router.message(Command("start"))
    async def cmd_start(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.clear()
        main_kb = build_main_menu()
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\n"
            "<b>–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500</b>\n\n"
            "–ì–¥–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞ ‚Äî —Ü–µ–Ω–∞ –≤ ‚ÇΩ –∑–∞ —Å—É—Ç–∫–∏.",
            reply_markup=main_kb,
        )

    def build_rentals_list_kb(rows: list[dict]) -> InlineKeyboardMarkup:
        buttons = []
        for r in rows:
            left = format_remaining_time(int(r["start_time"]))
            buttons.append([InlineKeyboardButton(text=f"{r['tool_name']} ‚Äî {left}", callback_data=f"rental_open:{r['id']}")])
        buttons.append([InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="rentals_refresh")])
        buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def build_rental_menu_kb(rental_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 24—á", callback_data=f"rental_renew:{rental_id}")],
            [InlineKeyboardButton(text="üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"rental_close:{rental_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="rentals_list")],
        ])

    @router.message(Command("list"))
    async def cmd_list(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.clear()
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            return
        await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))

    @router.message(Command("report_now"))
    async def cmd_report_now(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        await scheduler.send_daily_report_for_user(message.from_user.id)
        await message.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    @router.message(Command("report_today"))
    async def cmd_report_today(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        date = moscow_today_str()
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        from utils import format_daily_report_with_revenue
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(Command("report"))
    async def cmd_report(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        # /report YYYY-MM-DD
        text = (message.text or "").strip()
        parts = text.split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /report YYYY-MM-DD")
            return
        date = parts[1]
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: /report YYYY-MM-DD")
            return
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        from utils import format_daily_report_with_revenue
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(Command("expire_last"))
    async def cmd_expire_last(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç")
            return
        rental_id = int(rows[0]["id"])  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ ORDER BY id DESC –≤ –ë–î ‚Äî –º—ã –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /list
        await scheduler.trigger_expiration_now(rental_id)
        await message.answer("‚è±Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    @router.message(Command("income_today"))
    async def cmd_income_today(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        date = moscow_today_str()
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ {date}: {s}‚ÇΩ")

    @router.message(Command("income"))
    async def cmd_income(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /income YYYY-MM-DD
        text = (message.text or "").strip()
        parts = text.split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /income YYYY-MM-DD")
            return
        date = parts[1]
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: /income YYYY-MM-DD")
            return
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ {date}: {s}‚ÇΩ")

    # --- Catalog commands ---
    def build_tools_list_kb(items: list[dict]) -> InlineKeyboardMarkup:
        rows = []
        for it in items:
            rows.append([InlineKeyboardButton(text=f"{it['name']} ({it['price']}‚ÇΩ)", callback_data=f"tool_open:{it['id']}")])
        rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")])
        return InlineKeyboardMarkup(inline_keyboard=rows)

    def build_tool_menu_kb(tool_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"tool_do_rename:{tool_id}")],
            [InlineKeyboardButton(text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"tool_do_price:{tool_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"tool_do_delete:{tool_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="tools_list")],
        ])

    @router.message(Command("catalog"))
    async def cmd_catalog(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        items = await list_tools(limit=50)
        if not items:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
            return
        await state.set_state(EditToolStates.choosing_tool)
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))

    @router.message(Command("setprice"))
    async def cmd_setprice(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        # /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>
        text = (message.text or "").strip()
        parts = text.split(" ", 2)
        if len(parts) < 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")
            return
        _, name, price_str = parts
        try:
            price = int(price_str)
            if price <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await upsert_tool(name, price)
        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è \"{name}\": {price}‚ÇΩ")

    @router.callback_query(F.data == "tools_list")
    async def cb_tools_list(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        items = await list_tools(limit=50)
        await state.set_state(EditToolStates.choosing_tool)
        await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await callback.message.answer(reply_markup=build_tools_list_kb(items), text=" ")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_open:"))
    async def cb_tool_open(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        tool = await get_tool_by_id(tool_id)
        if not tool:
            await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await callback.message.edit_text(f"üîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_rename:"))
    async def cb_tool_do_rename(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.renaming)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_price:"))
    async def cb_tool_do_price(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.pricing)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_delete:"))
    async def cb_tool_do_delete(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        tool_id = int(callback.data.split(":", 1)[1])
        await delete_tool(tool_id)
        await callback.message.edit_text("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω")
        await callback.answer()

    @router.message(EditToolStates.renaming, F.text)
    async def state_renaming(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        data = await state.get_data()
        tool_id = int(data.get("tool_id"))
        new_name = (message.text or "").strip()
        if not new_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        await update_tool_name(tool_id, new_name)
        tool = await get_tool_by_id(tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\nüîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))

    @router.message(EditToolStates.pricing, F.text)
    async def state_pricing(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        data = await state.get_data()
        tool_id = int(data.get("tool_id"))
        try:
            new_price = int((message.text or "").strip())
            if new_price <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await update_tool_price(tool_id, new_price)
        tool = await get_tool_by_id(tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\nüîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))

    @router.message(Command("import_catalog"))
    async def cmd_import_catalog(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª /app/data/catalog.csv
        from pathlib import Path
        path = Path("/app/data/catalog.csv")
        if not path.exists():
            await message.answer("–§–∞–π–ª /app/data/catalog.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ volume bot_data.")
            return
        count = await import_catalog_from_csv(str(path))
        await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {count}")

    # --- Text buttons handling ---
    @router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥")
    async def btn_list(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.clear()
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            return
        await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))

    @router.callback_query(F.data == "rentals_refresh")
    async def cb_rentals_refresh(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        rows = await get_active_rentals(user_id=callback.from_user.id)
        if not rows:
            await callback.message.edit_text("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.", reply_markup=None)
            await callback.answer()
            return
        # –ú–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –∏ —Ç–µ–∫—Å—Ç, –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):")
        await callback.message.edit_reply_markup(reply_markup=build_rentals_list_kb(rows))
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    @router.callback_query(F.data == "rentals_list")
    async def cb_rentals_list(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        rows = await get_active_rentals(user_id=callback.from_user.id)
        if not rows:
            await callback.message.edit_text("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            await callback.answer()
            return
        await callback.message.edit_text(
            "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):",
            reply_markup=build_rentals_list_kb(rows),
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("rental_open:"))
    async def cb_rental_open(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if not row or int(row.get("active", 0)) != 1:
            await callback.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
            return
        left = format_remaining_time(int(row["start_time"]))
        end_hhmm = format_local_end_time_hhmm(int(row["start_time"]))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        deposit = int(row.get("deposit", 0))
        payment_method = row.get("payment_method", "cash")
        delivery_type = row.get("delivery_type", "pickup")
        address = row.get("address", "")
        
        payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
        delivery_text = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if delivery_type == "delivery" else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"
        
        text = (
            f"üîß <b>{row['tool_name']}</b> ‚Äî {row['rent_price']}‚ÇΩ/—Å—É—Ç–∫–∏\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {left} (–¥–æ {end_hhmm})\n"
            f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
            f"{payment_text}\n"
            f"{delivery_text}"
        )
        
        if delivery_type == "delivery" and address:
            text += f"\nüìç –ê–¥—Ä–µ—Å: {address}"
        
        await callback.message.edit_text(text, reply_markup=build_rental_menu_kb(rental_id))
        await callback.answer()

    @router.callback_query(F.data.startswith("rental_renew:"))
    async def cb_rental_renew(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        try:
            rental_id = int(callback.data.split(":", 1)[1])
            row_before = await get_rental_by_id(rental_id)
            if not row_before:
                await callback.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            # –ù–∞—á–∏—Å–ª–∏–º –≤—ã—Ä—É—á–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏ –ø—Ä–æ–¥–ª–∏–º –Ω–∞ +24—á –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row_before["rent_price"]))
            await renew_rental(rental_id)
            row_after = await get_rental_by_id(rental_id)
            if row_after:
                await scheduler.schedule_expiration_notification(
                    rental_id=rental_id,
                    start_time_ts=int(row_after["start_time"]),
                    user_id=row_after["user_id"],
                    tool_name=row_after["tool_name"],
                )
                left = format_remaining_time(int(row_after["start_time"]))
                end_hhmm = format_local_end_time_hhmm(int(row_after["start_time"]))
                text = f"üîß {row_after['tool_name']} ‚Äî {row_after['rent_price']}‚ÇΩ/—Å—É—Ç–∫–∏\n–û—Å—Ç–∞–ª–æ—Å—å: {left} (–¥–æ {end_hhmm})"
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç; –µ—Å–ª–∏ Telegram –≤–µ—Ä–Ω—ë—Ç "message is not modified" ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                try:
                    await callback.message.edit_text(text, reply_markup=build_rental_menu_kb(rental_id))
                except Exception:
                    pass
            await callback.answer("‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ 24—á")
        except Exception as e:
            logger.exception("rental_renew failed: %s", e)
            try:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è", show_alert=True)
            except Exception:
                pass

    @router.callback_query(F.data.startswith("rental_close:"))
    async def cb_rental_close(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if row:
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row["rent_price"]))
        await close_rental(rental_id)
        await callback.message.edit_text("üîí –ê—Ä–µ–Ω–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await callback.answer()

    @router.message(F.text == "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ")
    async def btn_report_by_date(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.set_state(ReportStates.waiting_date)
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]
        ])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD", reply_markup=back_kb)

    @router.message(F.text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å")
    async def btn_report_now(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.clear()
        # –¢–æ –∂–µ, —á—Ç–æ /report_today
        from utils import format_daily_report_with_revenue
        date = moscow_today_str()
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(ReportStates.waiting_date, F.text)
    async def state_report_by_date(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        text = (message.text or "").strip()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º
        main_buttons = {"üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥", "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ", "üìö –ö–∞—Ç–∞–ª–æ–≥", "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV", "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"}
        if text in main_buttons:
            await state.clear()
            # –†–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥":
                rows = await get_active_rentals(user_id=message.from_user.id)
                if not rows:
                    await message.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
                    return
                await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è):", reply_markup=build_rentals_list_kb(rows))
                return
            if text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å":
                from utils import format_daily_report_with_revenue
                date = moscow_today_str()
                rows = await get_active_rentals(user_id=message.from_user.id)
                s = await sum_revenue_by_date_for_user(date, message.from_user.id)
                await message.answer(format_daily_report_with_revenue(date, rows, s))
                return
            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                await cmd_catalog(message, state)
                return
            if text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV":
                back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]])
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
                    reply_markup=back_kb,
                )
                return
            if text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
                )
                return
        if text.startswith("/"):
            await state.clear()
            # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É
            await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
            return
        if len(text) != 10 or text[4] != '-' or text[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD")
            return
        from utils import format_daily_report_with_revenue
        date = text
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]
        ])
        await message.answer(format_daily_report_with_revenue(date, rows, s), reply_markup=back_kb)
        await state.clear()

    @router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
    async def btn_catalog(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        # –°–±—Ä–æ—Å–∏–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–∞—Ç–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –∫–∞–∫ –¥–∞—Ç–∞
        await state.clear()
        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π FSM, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /catalog
        await cmd_catalog(message, state)

    @router.message(F.text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV")
    async def btn_import_hint(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.clear()
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]
        ])
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
            reply_markup=back_kb,
        )

    @router.callback_query(F.data == "back_menu")
    async def cb_back_menu(callback: CallbackQuery, state: FSMContext) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        await state.clear()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=build_main_menu())
        await callback.answer()

    # --- Reset database (testing) ---
    @router.message(Command("reset_db"))
    async def cmd_reset_db(message: Message) -> None:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ö†Ô∏è –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="reset_db_confirm"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_menu"),
            ]
        ])
        await message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∞—Ä–µ–Ω–¥—ã, –≤—ã—Ä—É—á–∫–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥.",
            reply_markup=kb,
        )

    @router.callback_query(F.data == "reset_db_confirm")
    async def cb_reset_db(confirm: CallbackQuery) -> None:
        if not is_admin(confirm.from_user.id):
            await confirm.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        await reset_database()
        await confirm.message.edit_text("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await confirm.answer()

    @router.message(F.text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
    async def btn_setprice_hint(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        await state.clear()
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n"
            "–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
        )

    # --- CSV import by sending a file ---
    @router.message(F.document)
    async def on_document(message: Message) -> None:
        if not check_admin_access(message):
            return
        
        doc = message.document
        if not doc:
            return
        file_name = (doc.file_name or "").lower()
        mime = (doc.mime_type or "").lower()
        if not (file_name.endswith('.csv') or 'csv' in mime):
            # Ignore non-CSV documents
            return
        await message.answer("‚¨áÔ∏è –ü–æ–ª—É—á–∏–ª CSV, –Ω–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç...")
        try:
            from pathlib import Path
            import asyncio

            uploads_dir = Path("/app/data/uploads")
            uploads_dir.mkdir(parents=True, exist_ok=True)
            dest_path = uploads_dir / (file_name or "catalog.csv")

            # Download file to destination
            await message.bot.download(doc, destination=str(dest_path))

            count = await import_catalog_from_csv(str(dest_path))
            await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {count}")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ,—Ü–µ–Ω–∞")

    @router.message(F.text)
    async def add_rent_handler(message: Message, state: FSMContext) -> None:
        if not check_admin_access(message):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        current_state = await state.get_state()
        if current_state in [RentalStates.waiting_deposit, RentalStates.waiting_payment_method, 
                           RentalStates.waiting_delivery_type, RentalStates.waiting_address]:
            # –ï—Å–ª–∏ –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
            return
        
        text = (message.text or "").strip()
        # –ö–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if text.startswith("rename "):
            parts = text.split(" ", 2)
            if len(parts) < 3:
                await message.answer("–§–æ—Ä–º–∞—Ç: rename <id> <–ù–æ–≤–æ–µ–ù–∞–∑–≤–∞–Ω–∏–µ>")
                return
            try:
                tool_id = int(parts[1])
            except ValueError:
                await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            new_name = parts[2].strip()
            if not new_name:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            await update_tool_name(tool_id, new_name)
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return

        if text.startswith("price "):
            parts = text.split()
            if len(parts) != 3:
                await message.answer("–§–æ—Ä–º–∞—Ç: price <id> <—Ü–µ–Ω–∞>")
                return
            try:
                tool_id = int(parts[1])
                new_price = int(parts[2])
                if new_price <= 0:
                    raise ValueError
            except ValueError:
                await message.answer("ID –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
                return
            await update_tool_price(tool_id, new_price)
            await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        parsed = parse_tool_and_price(text)
        if parsed is None:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ü–µ–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_row = await get_tool_by_name(text)
            if not catalog_row:
                await message.answer(
                    "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¶–µ–Ω–∞</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500</b>\n"
                    "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ /setprice –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥."
                )
                return
            tool_name, rent_price = catalog_row["name"], int(catalog_row["price"]) 
        else:
            tool_name, rent_price = parsed
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ FSM
        await state.update_data(tool_name=tool_name, rent_price=rent_price)
        await state.set_state(RentalStates.waiting_deposit)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ª–æ–≥
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–∑ –∑–∞–ª–æ–≥–∞", callback_data="deposit:0")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_menu")]
        ])
        await message.answer(
            f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n\n"
            "üí∞ –ö–∞–∫–æ–π –∑–∞–ª–æ–≥ –æ—Å—Ç–∞–≤–∏–ª–∏? (–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É)",
            reply_markup=kb
        )


    async def create_rental_from_fsm(message_or_callback, state: FSMContext) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä–µ–Ω–¥—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö FSM"""
        data = await state.get_data()
        tool_name = data.get("tool_name")
        rent_price = data.get("rent_price")
        deposit = data.get("deposit", 0)
        payment_method = data.get("payment_method", "cash")
        delivery_type = data.get("delivery_type", "pickup")
        address = data.get("address", "")
        
        if not tool_name or not rent_price:
            await message_or_callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if hasattr(message_or_callback, 'from_user'):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä–µ–Ω–¥—É
        rental_id = await add_rental(
            tool_name=tool_name,
            rent_price=rent_price,
            user_id=user_id,
            deposit=deposit,
            payment_method=payment_method,
            delivery_type=delivery_type,
            address=address
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É
        date_key = moscow_today_str()
        await add_revenue(date_key, rental_id, rent_price)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await scheduler.schedule_expiration_notification(
            rental_id=rental_id,
            start_time_ts=(await get_rental_by_id(rental_id))["start_time"],
            user_id=user_id,
            tool_name=tool_name,
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üí≥ –ü–µ—Ä–µ–≤–æ–¥"
        delivery_text = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if delivery_type == "delivery" else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"
        
        result_text = (
            f"‚úÖ <b>–ê—Ä–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üîß <b>{tool_name}</b> ‚Äî {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏\n"
            f"üí∞ –ó–∞–ª–æ–≥: {deposit}‚ÇΩ\n"
            f"{payment_text}\n"
            f"{delivery_text}"
        )
        
        if delivery_type == "delivery" and address:
            result_text += f"\nüìç –ê–¥—Ä–µ—Å: {address}"
        
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(result_text)
            await message_or_callback.answer()
        else:
            await message_or_callback.answer(result_text)
        
        await state.clear()

    @router.callback_query(F.data.startswith("renew:"))
    async def on_renew(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        row_before = await get_rental_by_id(rental_id)
        if row_before:
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤—ã—Ä—É—á–∫–∏ (–æ–Ω–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
            await renew_rental(rental_id)
            row_after = await get_rental_by_id(rental_id)
            if row_after:
                await scheduler.schedule_expiration_notification(
                    rental_id=rental_id,
                    start_time_ts=row_after["start_time"],
                    user_id=row_after["user_id"],
                    tool_name=row_after["tool_name"],
                )
        await callback.message.edit_text("‚úÖ –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞")
        await callback.answer()

    @router.callback_query(F.data.startswith("close:"))
    async def on_close(callback: CallbackQuery) -> None:
        if not is_admin(callback.from_user.id):
            await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        
        rental_id = int(callback.data.split(":", 1)[1])
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤—ã—Ä—É—á–∫–∏ (–æ–Ω–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
        await close_rental(rental_id)
        await callback.message.edit_text("üîí –ê—Ä–µ–Ω–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await callback.answer()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º FSM —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω –∏–º–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    dp.include_router(fsm_router)
    dp.include_router(router)


