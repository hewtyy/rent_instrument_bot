import logging
from typing import Tuple

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database import add_rental, get_active_rentals, renew_rental, close_rental, get_rental_by_id, add_revenue, sum_revenue_by_date_for_user, get_tool_by_name, upsert_tool, list_tools, import_catalog_from_csv, reset_database, get_tool_by_id, update_tool_name, update_tool_price, delete_tool, sum_revenue_by_date
from utils import parse_tool_and_price, format_active_list, ts_to_moscow_date_str, moscow_today_str, moscow_yesterday_str

logger = logging.getLogger(__name__)


def build_expiration_keyboard(rental_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"renew:{rental_id}"),
            InlineKeyboardButton(text="‚ùå –ó–∞–±—Ä–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data=f"close:{rental_id}"),
        ]
    ])
    return kb


class EditToolStates(StatesGroup):
    choosing_tool = State()
    tool_menu = State()
    renaming = State()
    pricing = State()


class ReportStates(StatesGroup):
    waiting_date = State()


def register_handlers(dp, scheduler) -> None:
    router = Router()

    def build_main_menu() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å")],
                [KeyboardButton(text="üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ"), KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥")],
                [KeyboardButton(text="‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV"), KeyboardButton(text="üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")],
            ],
            resize_keyboard=True,
        )

    @router.message(Command("start"))
    async def cmd_start(message: Message) -> None:
        main_kb = build_main_menu()
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\n"
            "<b>–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500</b>\n\n"
            "–ì–¥–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞ ‚Äî —Ü–µ–Ω–∞ –≤ ‚ÇΩ –∑–∞ —Å—É—Ç–∫–∏.",
            reply_markup=main_kb,
        )

    @router.message(Command("list"))
    async def cmd_list(message: Message) -> None:
        rows = await get_active_rentals(user_id=message.from_user.id)
        await message.answer(format_active_list(rows))

    @router.message(Command("report_now"))
    async def cmd_report_now(message: Message) -> None:
        await scheduler.send_daily_report_for_user(message.from_user.id)
        await message.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    @router.message(Command("report_today"))
    async def cmd_report_today(message: Message) -> None:
        date = moscow_today_str()
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        from utils import format_daily_report_with_revenue
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(Command("report"))
    async def cmd_report(message: Message) -> None:
        # /report YYYY-MM-DD
        text = (message.text or "").strip()
        parts = text.split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /report YYYY-MM-DD")
            return
        date = parts[1]
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: /report YYYY-MM-DD")
            return
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        from utils import format_daily_report_with_revenue
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(Command("expire_last"))
    async def cmd_expire_last(message: Message) -> None:
        rows = await get_active_rentals(user_id=message.from_user.id)
        if not rows:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç")
            return
        rental_id = int(rows[0]["id"])  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ ORDER BY id DESC –≤ –ë–î ‚Äî –º—ã –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /list
        await scheduler.trigger_expiration_now(rental_id)
        await message.answer("‚è±Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    @router.message(Command("income_today"))
    async def cmd_income_today(message: Message) -> None:
        date = moscow_today_str()
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ {date}: {s}‚ÇΩ")

    @router.message(Command("income"))
    async def cmd_income(message: Message) -> None:
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /income YYYY-MM-DD
        text = (message.text or "").strip()
        parts = text.split()
        if len(parts) != 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: /income YYYY-MM-DD")
            return
        date = parts[1]
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        if len(date) != 10 or date[4] != '-' or date[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: /income YYYY-MM-DD")
            return
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ {date}: {s}‚ÇΩ")

    # --- Catalog commands ---
    def build_tools_list_kb(items: list[dict]) -> InlineKeyboardMarkup:
        rows = []
        for it in items:
            rows.append([InlineKeyboardButton(text=f"{it['name']} ({it['price']}‚ÇΩ)", callback_data=f"tool_open:{it['id']}")])
        rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")])
        return InlineKeyboardMarkup(inline_keyboard=rows)

    def build_tool_menu_kb(tool_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"tool_do_rename:{tool_id}")],
            [InlineKeyboardButton(text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"tool_do_price:{tool_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"tool_do_delete:{tool_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data="tools_list")],
        ])

    @router.message(Command("catalog"))
    async def cmd_catalog(message: Message, state: FSMContext) -> None:
        items = await list_tools(limit=50)
        if not items:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setprice.")
            return
        await state.set_state(EditToolStates.choosing_tool)
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=build_tools_list_kb(items))

    @router.message(Command("setprice"))
    async def cmd_setprice(message: Message) -> None:
        # /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>
        text = (message.text or "").strip()
        parts = text.split(" ", 2)
        if len(parts) < 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")
            return
        _, name, price_str = parts
        try:
            price = int(price_str)
            if price <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await upsert_tool(name, price)
        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è \"{name}\": {price}‚ÇΩ")

    @router.callback_query(F.data == "tools_list")
    async def cb_tools_list(callback: CallbackQuery, state: FSMContext) -> None:
        items = await list_tools(limit=50)
        await state.set_state(EditToolStates.choosing_tool)
        await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await callback.message.answer(reply_markup=build_tools_list_kb(items), text=" ")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_open:"))
    async def cb_tool_open(callback: CallbackQuery, state: FSMContext) -> None:
        tool_id = int(callback.data.split(":", 1)[1])
        tool = await get_tool_by_id(tool_id)
        if not tool:
            await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await callback.message.edit_text(f"üîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_rename:"))
    async def cb_tool_do_rename(callback: CallbackQuery, state: FSMContext) -> None:
        tool_id = int(callback.data.split(":", 1)[1])
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.renaming)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_price:"))
    async def cb_tool_do_price(callback: CallbackQuery, state: FSMContext) -> None:
        tool_id = int(callback.data.split(":", 1)[1])
        await state.update_data(tool_id=tool_id)
        await state.set_state(EditToolStates.pricing)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
        await callback.answer()

    @router.callback_query(F.data.startswith("tool_do_delete:"))
    async def cb_tool_do_delete(callback: CallbackQuery, state: FSMContext) -> None:
        tool_id = int(callback.data.split(":", 1)[1])
        await delete_tool(tool_id)
        await callback.message.edit_text("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω")
        await callback.answer()

    @router.message(EditToolStates.renaming, F.text)
    async def state_renaming(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        tool_id = int(data.get("tool_id"))
        new_name = (message.text or "").strip()
        if not new_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        await update_tool_name(tool_id, new_name)
        tool = await get_tool_by_id(tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\nüîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))

    @router.message(EditToolStates.pricing, F.text)
    async def state_pricing(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        tool_id = int(data.get("tool_id"))
        try:
            new_price = int((message.text or "").strip())
            if new_price <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await update_tool_price(tool_id, new_price)
        tool = await get_tool_by_id(tool_id)
        await state.set_state(EditToolStates.tool_menu)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\nüîß {tool['name']} ‚Äî {tool['price']}‚ÇΩ", reply_markup=build_tool_menu_kb(tool_id))

    @router.message(Command("import_catalog"))
    async def cmd_import_catalog(message: Message) -> None:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª /app/data/catalog.csv
        from pathlib import Path
        path = Path("/app/data/catalog.csv")
        if not path.exists():
            await message.answer("–§–∞–π–ª /app/data/catalog.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ volume bot_data.")
            return
        count = await import_catalog_from_csv(str(path))
        await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {count}")

    # --- Text buttons handling ---
    @router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥")
    async def btn_list(message: Message) -> None:
        rows = await get_active_rentals(user_id=message.from_user.id)
        await message.answer(format_active_list(rows))

    @router.message(F.text == "üìÖ –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ")
    async def btn_report_by_date(message: Message, state: FSMContext) -> None:
        await state.set_state(ReportStates.waiting_date)
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]
        ])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD", reply_markup=back_kb)

    @router.message(F.text == "üìä –û—Ç—á—ë—Ç —Å–µ–π—á–∞—Å")
    async def btn_report_now(message: Message) -> None:
        # –¢–æ –∂–µ, —á—Ç–æ /report_today
        from utils import format_daily_report_with_revenue
        date = moscow_today_str()
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        await message.answer(format_daily_report_with_revenue(date, rows, s))

    @router.message(ReportStates.waiting_date, F.text)
    async def state_report_by_date(message: Message, state: FSMContext) -> None:
        text = (message.text or "").strip()
        if len(text) != 10 or text[4] != '-' or text[7] != '-':
            await message.answer("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD")
            return
        from utils import format_daily_report_with_revenue
        date = text
        rows = await get_active_rentals(user_id=message.from_user.id)
        s = await sum_revenue_by_date_for_user(date, message.from_user.id)
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]
        ])
        await message.answer(format_daily_report_with_revenue(date, rows, s), reply_markup=back_kb)
        await state.clear()

    @router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
    async def btn_catalog(message: Message, state: FSMContext) -> None:
        # –°–±—Ä–æ—Å–∏–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–∞—Ç–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –∫–∞–∫ –¥–∞—Ç–∞
        await state.clear()
        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π FSM, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /catalog
        await cmd_catalog(message, state)

    @router.message(F.text == "‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç CSV")
    async def btn_import_hint(message: Message) -> None:
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_menu")]
        ])
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8) –ø—Ä—è–º–æ –≤ —á–∞—Ç ‚Äî –±–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥.\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞</code> (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏).",
            reply_markup=back_kb,
        )

    @router.callback_query(F.data == "back_menu")
    async def cb_back_menu(callback: CallbackQuery) -> None:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=build_main_menu())
        await callback.answer()

    # --- Reset database (testing) ---
    @router.message(Command("reset_db"))
    async def cmd_reset_db(message: Message) -> None:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ö†Ô∏è –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="reset_db_confirm"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_menu"),
            ]
        ])
        await message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∞—Ä–µ–Ω–¥—ã, –≤—ã—Ä—É—á–∫–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥.",
            reply_markup=kb,
        )

    @router.callback_query(F.data == "reset_db_confirm")
    async def cb_reset_db(confirm: CallbackQuery) -> None:
        await reset_database()
        await confirm.message.edit_text("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await confirm.answer()

    @router.message(F.text == "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
    async def btn_setprice_hint(message: Message) -> None:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setprice &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Ü–µ–Ω–∞&gt;\n"
            "–ü—Ä–∏–º–µ—Ä: /setprice –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500"
        )

    # --- CSV import by sending a file ---
    @router.message(F.document)
    async def on_document(message: Message) -> None:
        doc = message.document
        if not doc:
            return
        file_name = (doc.file_name or "").lower()
        mime = (doc.mime_type or "").lower()
        if not (file_name.endswith('.csv') or 'csv' in mime):
            # Ignore non-CSV documents
            return
        await message.answer("‚¨áÔ∏è –ü–æ–ª—É—á–∏–ª CSV, –Ω–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç...")
        try:
            from pathlib import Path
            import asyncio

            uploads_dir = Path("/app/data/uploads")
            uploads_dir.mkdir(parents=True, exist_ok=True)
            dest_path = uploads_dir / (file_name or "catalog.csv")

            # Download file to destination
            await message.bot.download(doc, destination=str(dest_path))

            count = await import_catalog_from_csv(str(dest_path))
            await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {count}")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ,—Ü–µ–Ω–∞")

    @router.message(F.text)
    async def add_rent_handler(message: Message) -> None:
        text = (message.text or "").strip()
        # –ö–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if text.startswith("rename "):
            parts = text.split(" ", 2)
            if len(parts) < 3:
                await message.answer("–§–æ—Ä–º–∞—Ç: rename <id> <–ù–æ–≤–æ–µ–ù–∞–∑–≤–∞–Ω–∏–µ>")
                return
            try:
                tool_id = int(parts[1])
            except ValueError:
                await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            new_name = parts[2].strip()
            if not new_name:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            await update_tool_name(tool_id, new_name)
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return

        if text.startswith("price "):
            parts = text.split()
            if len(parts) != 3:
                await message.answer("–§–æ—Ä–º–∞—Ç: price <id> <—Ü–µ–Ω–∞>")
                return
            try:
                tool_id = int(parts[1])
                new_price = int(parts[2])
                if new_price <= 0:
                    raise ValueError
            except ValueError:
                await message.answer("ID –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
                return
            await update_tool_price(tool_id, new_price)
            await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        parsed = parse_tool_and_price(text)
        if parsed is None:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ü–µ–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_row = await get_tool_by_name(text)
            if not catalog_row:
                await message.answer(
                    "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¶–µ–Ω–∞</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch 500</b>\n"
                    "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ /setprice –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥."
                )
                return
            tool_name, rent_price = catalog_row["name"], int(catalog_row["price"]) 
        else:
            tool_name, rent_price = parsed
        rental_id = await add_rental(tool_name, rent_price, message.from_user.id)
        # Schedule expiration in 24h
        await scheduler.schedule_expiration_notification(
            rental_id=rental_id,
            start_time_ts=(await get_rental_by_id(rental_id))["start_time"],
            user_id=message.from_user.id,
            tool_name=tool_name,
        )
        await message.answer(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç \"{tool_name}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä–µ–Ω–¥—É –∑–∞ {rent_price}‚ÇΩ/—Å—É—Ç–∫–∏")

    @router.callback_query(F.data.startswith("renew:"))
    async def on_renew(callback: CallbackQuery) -> None:
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if row:
            # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã—Ä—É—á–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É (TZ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row["rent_price"]))
            await renew_rental(rental_id)
            await scheduler.schedule_expiration_notification(
                rental_id=rental_id,
                start_time_ts=row["start_time"],
                user_id=row["user_id"],
                tool_name=row["tool_name"],
            )
        await callback.message.edit_text("‚úÖ –ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞")
        await callback.answer()

    @router.callback_query(F.data.startswith("close:"))
    async def on_close(callback: CallbackQuery) -> None:
        rental_id = int(callback.data.split(":", 1)[1])
        row = await get_rental_by_id(rental_id)
        if row:
            # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã—Ä—É—á–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É (TZ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            date_key = moscow_today_str()
            await add_revenue(date_key, rental_id, int(row["rent_price"]))
        await close_rental(rental_id)
        await callback.message.edit_text("üîí –ê—Ä–µ–Ω–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await callback.answer()

    dp.include_router(router)


